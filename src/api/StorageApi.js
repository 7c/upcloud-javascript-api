/**
 * Upcloud api
 * The UpCloud API consists of operations used to control resources on UpCloud. The API is a web service interface. HTTPS is used to connect to the API. The API follows the principles of a RESTful web service wherever possible. The base URL for all API operations is  https://api.upcloud.com/. All API operations require authentication.
 *
 * OpenAPI spec version: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import InlineResponse201 from '../model/InlineResponse201';
import ServerListResponse from '../model/ServerListResponse';
import Storage from '../model/Storage';
import Storage1 from '../model/Storage1';
import Storage2 from '../model/Storage2';
import Storage3 from '../model/Storage3';
import Storage4 from '../model/Storage4';
import StorageDevice from '../model/StorageDevice';
import StorageDevice1 from '../model/StorageDevice1';
import SuccessStoragesResponse from '../model/SuccessStoragesResponse';

/**
* Storage service.
* @module api/StorageApi
* @version 1.2.0
*/
export default class StorageApi {

    /**
    * Constructs a new StorageApi. 
    * @alias module:api/StorageApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listStorages operation.
     * @callback module:api/StorageApi~listStoragesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessStoragesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of storages
     * @param {module:api/StorageApi~listStoragesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessStoragesResponse}
     */
    listStorages(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessStoragesResponse;

      return this.apiClient.callApi(
        '/storage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listStorages_0 operation.
     * @callback module:api/StorageApi~listStorages_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessStoragesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of storages by type
     * @param {module:model/String} type Storage&#39;s access type (&#x60;public&#x60; or &#x60;private&#x60;) or storage type (&#x60;normal&#x60;, &#x60;backup&#x60;, &#x60;cdrom&#x60; or &#x60;template&#x60;) or &#x60;favorite&#x60; status
     * @param {module:api/StorageApi~listStorages_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessStoragesResponse}
     */
    listStorages_0(type, callback) {
      let postBody = null;

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling listStorages_0");
      }


      let pathParams = {
        'Type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessStoragesResponse;

      return this.apiClient.callApi(
        '/storage/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdStorageAttachPost operation.
     * @callback module:api/StorageApi~serverServerIdStorageAttachPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach storage
     * Attaches a storage as a device to a server.
     * @param {String} serverId Server id
     * @param {module:model/StorageDevice} storageDevice 
     * @param {module:api/StorageApi~serverServerIdStorageAttachPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    serverServerIdStorageAttachPost(serverId, storageDevice, callback) {
      let postBody = storageDevice;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdStorageAttachPost");
      }

      // verify the required parameter 'storageDevice' is set
      if (storageDevice === undefined || storageDevice === null) {
        throw new Error("Missing the required parameter 'storageDevice' when calling serverServerIdStorageAttachPost");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}/storage/attach', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdStorageCdromEjectPost operation.
     * @callback module:api/StorageApi~serverServerIdStorageCdromEjectPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Eject CD-ROM
     * Ejects the storage from the CD-ROM device of a server.
     * @param {String} serverId Server id
     * @param {module:api/StorageApi~serverServerIdStorageCdromEjectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    serverServerIdStorageCdromEjectPost(serverId, callback) {
      let postBody = null;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdStorageCdromEjectPost");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}/storage/cdrom/eject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdStorageCdromLoadPost operation.
     * @callback module:api/StorageApi~serverServerIdStorageCdromLoadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load CD-ROM
     * Loads a storage as a CD-ROM in the CD-ROM device of a server.
     * @param {String} serverId Server id
     * @param {Object} opts Optional parameters
     * @param {module:model/StorageDevice1} opts.storageDevice 
     * @param {module:api/StorageApi~serverServerIdStorageCdromLoadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    serverServerIdStorageCdromLoadPost(serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['storageDevice'];

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdStorageCdromLoadPost");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}/storage/cdrom/load', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdStorageDetachPost operation.
     * @callback module:api/StorageApi~serverServerIdStorageDetachPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detach storage
     * Detaches a storage resource from a server.
     * @param {String} serverId Server id
     * @param {module:model/StorageDevice} storageDevice 
     * @param {module:api/StorageApi~serverServerIdStorageDetachPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    serverServerIdStorageDetachPost(serverId, storageDevice, callback) {
      let postBody = storageDevice;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdStorageDetachPost");
      }

      // verify the required parameter 'storageDevice' is set
      if (storageDevice === undefined || storageDevice === null) {
        throw new Error("Missing the required parameter 'storageDevice' when calling serverServerIdStorageDetachPost");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}/storage/detach', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storagePost operation.
     * @callback module:api/StorageApi~storagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create storage
     * Creates a new storage resource.
     * @param {module:model/Storage} storage 
     * @param {module:api/StorageApi~storagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    storagePost(storage, callback) {
      let postBody = storage;

      // verify the required parameter 'storage' is set
      if (storage === undefined || storage === null) {
        throw new Error("Missing the required parameter 'storage' when calling storagePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/storage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storageStorageIdBackupPost operation.
     * @callback module:api/StorageApi~storageStorageIdBackupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create backup
     * Creates a point-in-time backup of a storage resource. For automatic, scheduled backups, see  &#x60;backup_rule&#x60; in Create storage or Modify storage.
     * @param {String} storageId Storage id
     * @param {Object} opts Optional parameters
     * @param {module:model/Storage4} opts.storage 
     * @param {module:api/StorageApi~storageStorageIdBackupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    storageStorageIdBackupPost(storageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['storage'];

      // verify the required parameter 'storageId' is set
      if (storageId === undefined || storageId === null) {
        throw new Error("Missing the required parameter 'storageId' when calling storageStorageIdBackupPost");
      }


      let pathParams = {
        'storageId': storageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/storage/{storageId}/backup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storageStorageIdCancelPost operation.
     * @callback module:api/StorageApi~storageStorageIdCancelPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel storage operation
     * Cancels a running cloning operation and deletes the incomplete copy.
     * @param {String} storageId Strage id
     * @param {module:api/StorageApi~storageStorageIdCancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageStorageIdCancelPost(storageId, callback) {
      let postBody = null;

      // verify the required parameter 'storageId' is set
      if (storageId === undefined || storageId === null) {
        throw new Error("Missing the required parameter 'storageId' when calling storageStorageIdCancelPost");
      }


      let pathParams = {
        'storageId': storageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/storage/{storageId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storageStorageIdClonePost operation.
     * @callback module:api/StorageApi~storageStorageIdClonePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone storage
     * Creates an exact copy of an existing storage resource.
     * @param {String} storageId Storage id
     * @param {Object} opts Optional parameters
     * @param {module:model/Storage2} opts.storage 
     * @param {module:api/StorageApi~storageStorageIdClonePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    storageStorageIdClonePost(storageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['storage'];

      // verify the required parameter 'storageId' is set
      if (storageId === undefined || storageId === null) {
        throw new Error("Missing the required parameter 'storageId' when calling storageStorageIdClonePost");
      }


      let pathParams = {
        'storageId': storageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/storage/{storageId}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storageStorageIdDelete operation.
     * @callback module:api/StorageApi~storageStorageIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete storage
     * Deleted an existing storage resource.
     * @param {String} storageId 
     * @param {module:api/StorageApi~storageStorageIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageStorageIdDelete(storageId, callback) {
      let postBody = null;

      // verify the required parameter 'storageId' is set
      if (storageId === undefined || storageId === null) {
        throw new Error("Missing the required parameter 'storageId' when calling storageStorageIdDelete");
      }


      let pathParams = {
        'storageId': storageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/storage/{storageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storageStorageIdFavoriteDelete operation.
     * @callback module:api/StorageApi~storageStorageIdFavoriteDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove storage from favorites
     * Delete a storage from the list of favorite storages. To list favorite storages, see List storages. This operations succeeds even if the storage is already on the list of favorites.
     * @param {String} storageId Storage id
     * @param {module:api/StorageApi~storageStorageIdFavoriteDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageStorageIdFavoriteDelete(storageId, callback) {
      let postBody = null;

      // verify the required parameter 'storageId' is set
      if (storageId === undefined || storageId === null) {
        throw new Error("Missing the required parameter 'storageId' when calling storageStorageIdFavoriteDelete");
      }


      let pathParams = {
        'storageId': storageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/storage/{storageId}/favorite', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storageStorageIdFavoritePost operation.
     * @callback module:api/StorageApi~storageStorageIdFavoritePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add storage to favorites
     * Adds a storage to the list of favorite storages. To list favorite storages, see List storages. This operations succeeds even if the storage is already on the list of favorites.
     * @param {String} storageId Storage id
     * @param {module:api/StorageApi~storageStorageIdFavoritePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageStorageIdFavoritePost(storageId, callback) {
      let postBody = null;

      // verify the required parameter 'storageId' is set
      if (storageId === undefined || storageId === null) {
        throw new Error("Missing the required parameter 'storageId' when calling storageStorageIdFavoritePost");
      }


      let pathParams = {
        'storageId': storageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/storage/{storageId}/favorite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storageStorageIdGet operation.
     * @callback module:api/StorageApi~storageStorageIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get storage details
     * Returns detailed information about a specific storage resource.
     * @param {String} storageId 
     * @param {module:api/StorageApi~storageStorageIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    storageStorageIdGet(storageId, callback) {
      let postBody = null;

      // verify the required parameter 'storageId' is set
      if (storageId === undefined || storageId === null) {
        throw new Error("Missing the required parameter 'storageId' when calling storageStorageIdGet");
      }


      let pathParams = {
        'storageId': storageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/storage/{storageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storageStorageIdPut operation.
     * @callback module:api/StorageApi~storageStorageIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify storage
     * Modifies an existing storage resource. This operation is used to rename or resize the storage.
     * @param {String} storageId 
     * @param {module:model/Storage1} storage 
     * @param {module:api/StorageApi~storageStorageIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    storageStorageIdPut(storageId, storage, callback) {
      let postBody = storage;

      // verify the required parameter 'storageId' is set
      if (storageId === undefined || storageId === null) {
        throw new Error("Missing the required parameter 'storageId' when calling storageStorageIdPut");
      }

      // verify the required parameter 'storage' is set
      if (storage === undefined || storage === null) {
        throw new Error("Missing the required parameter 'storage' when calling storageStorageIdPut");
      }


      let pathParams = {
        'storageId': storageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/storage/{storageId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storageStorageIdRestorePost operation.
     * @callback module:api/StorageApi~storageStorageIdRestorePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore backup
     * Restores the origin storage with data from the specified backup storage.
     * @param {String} storageId Storage id
     * @param {module:api/StorageApi~storageStorageIdRestorePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageStorageIdRestorePost(storageId, callback) {
      let postBody = null;

      // verify the required parameter 'storageId' is set
      if (storageId === undefined || storageId === null) {
        throw new Error("Missing the required parameter 'storageId' when calling storageStorageIdRestorePost");
      }


      let pathParams = {
        'storageId': storageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/storage/{storageId}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storageStorageIdTemplatizePost operation.
     * @callback module:api/StorageApi~storageStorageIdTemplatizePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Templatize storage
     * Creates an exact copy of an existing storage resource which can be used as a template for creating new servers.
     * @param {String} storageId Storage id
     * @param {Object} opts Optional parameters
     * @param {module:model/Storage3} opts.storage 
     * @param {module:api/StorageApi~storageStorageIdTemplatizePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    storageStorageIdTemplatizePost(storageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['storage'];

      // verify the required parameter 'storageId' is set
      if (storageId === undefined || storageId === null) {
        throw new Error("Missing the required parameter 'storageId' when calling storageStorageIdTemplatizePost");
      }


      let pathParams = {
        'storageId': storageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/storage/{storageId}/templatize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
