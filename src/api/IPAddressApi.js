/**
 * Upcloud api
 * The UpCloud API consists of operations used to control resources on UpCloud. The API is a web service interface. HTTPS is used to connect to the API. The API follows the principles of a RESTful web service wherever possible. The base URL for all API operations is  https://api.upcloud.com/. All API operations require authentication.
 *
 * OpenAPI spec version: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssignIpResponse from '../model/AssignIpResponse';
import Error from '../model/Error';
import IpAddress from '../model/IpAddress';
import IpAddress1 from '../model/IpAddress1';
import IpAddressListResponse from '../model/IpAddressListResponse';

/**
* IPAddress service.
* @module api/IPAddressApi
* @version 1.2.0
*/
export default class IPAddressApi {

    /**
    * Constructs a new IPAddressApi. 
    * @alias module:api/IPAddressApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addIp operation.
     * @callback module:api/IPAddressApi~addIpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignIpResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign IP address
     * Assigns a new IP address to a server.
     * @param {Object} opts Optional parameters
     * @param {module:model/IpAddress} opts.ipAddress 
     * @param {module:api/IPAddressApi~addIpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignIpResponse}
     */
    addIp(opts, callback) {
      opts = opts || {};
      let postBody = opts['ipAddress'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = AssignIpResponse;

      return this.apiClient.callApi(
        '/ip_address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIp operation.
     * @callback module:api/IPAddressApi~deleteIpCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Release IP address
     * Removes an IP address from a server.
     * @param {String} ip Ip address
     * @param {module:api/IPAddressApi~deleteIpCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIp(ip, callback) {
      let postBody = null;

      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling deleteIp");
      }


      let pathParams = {
        'ip': ip
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/ip_address/{ip}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDetails operation.
     * @callback module:api/IPAddressApi~getDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignIpResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get IP address details
     * Returns detailed information about a specific IP address.
     * @param {String} ip Ip address
     * @param {module:api/IPAddressApi~getDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignIpResponse}
     */
    getDetails(ip, callback) {
      let postBody = null;

      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling getDetails");
      }


      let pathParams = {
        'ip': ip
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = AssignIpResponse;

      return this.apiClient.callApi(
        '/ip_address/{ip}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listIps operation.
     * @callback module:api/IPAddressApi~listIpsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpAddressListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List IP addresses
     * Returns a list of all IP addresses assigned to servers on the current user account.
     * @param {module:api/IPAddressApi~listIpsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpAddressListResponse}
     */
    listIps(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = IpAddressListResponse;

      return this.apiClient.callApi(
        '/ip_address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyIp operation.
     * @callback module:api/IPAddressApi~modifyIpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignIpResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify IP address
     * Modifies the reverse DNS PTR record corresponding to an IP address. The PTR record can only be set to public IP address.
     * @param {String} ip Ip address
     * @param {Object} opts Optional parameters
     * @param {module:model/IpAddress1} opts.ipAddress 
     * @param {module:api/IPAddressApi~modifyIpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignIpResponse}
     */
    modifyIp(ip, opts, callback) {
      opts = opts || {};
      let postBody = opts['ipAddress'];

      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling modifyIp");
      }


      let pathParams = {
        'ip': ip
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = AssignIpResponse;

      return this.apiClient.callApi(
        '/ip_address/{ip}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
