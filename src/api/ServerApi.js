/**
 * Upcloud api
 * The UpCloud API consists of operations used to control resources on UpCloud. The API is a web service interface. HTTPS is used to connect to the API. The API follows the principles of a RESTful web service wherever possible. The base URL for all API operations is  https://api.upcloud.com/. All API operations require authentication.
 *
 * OpenAPI spec version: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import FirewallRule from '../model/FirewallRule';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse2007 from '../model/InlineResponse2007';
import InlineResponse2008 from '../model/InlineResponse2008';
import RestartServer from '../model/RestartServer';
import Server from '../model/Server';
import ServerListResponse from '../model/ServerListResponse';
import StopServer from '../model/StopServer';
import StorageDevice from '../model/StorageDevice';
import StorageDevice1 from '../model/StorageDevice1';

/**
* Server service.
* @module api/ServerApi
* @version 1.2.0
*/
export default class ServerApi {

    /**
    * Constructs a new ServerApi. 
    * @alias module:api/ServerApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createServer operation.
     * @callback module:api/ServerApi~createServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create server
     * Creates a new server instance.
     * @param {Object} opts Optional parameters
     * @param {module:model/Server} opts.server 
     * @param {module:api/ServerApi~createServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    createServer(opts, callback) {
      opts = opts || {};
      let postBody = opts['server'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServer operation.
     * @callback module:api/ServerApi~deleteServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete server
     * @param {String} serverId Id of server to delete
     * @param {module:api/ServerApi~deleteServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteServer(serverId, callback) {
      let postBody = null;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling deleteServer");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/server/{serverId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listServers operation.
     * @callback module:api/ServerApi~listServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of servers
     * Returns a list of all servers associated with the current account.
     * @param {module:api/ServerApi~listServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    listServers(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/server', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverDetails operation.
     * @callback module:api/ServerApi~serverDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get server details
     * Returns detailed information about a specific server.
     * @param {String} serverId Id of server to return
     * @param {module:api/ServerApi~serverDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    serverDetails(serverId, callback) {
      let postBody = null;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverDetails");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdFirewallRuleFirewallRuleNumberDelete operation.
     * @callback module:api/ServerApi~serverServerIdFirewallRuleFirewallRuleNumberDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove firewall rule
     * Removes a firewall rule from a server. Firewall rules must be removed individually. The positions of remaining firewall rules will be adjusted after a rule is removed.
     * @param {String} serverId Server id
     * @param {String} firewallRuleNumber Denotes the index of the firewall rule in the server&#39;s firewall rule list
     * @param {module:api/ServerApi~serverServerIdFirewallRuleFirewallRuleNumberDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serverServerIdFirewallRuleFirewallRuleNumberDelete(serverId, firewallRuleNumber, callback) {
      let postBody = null;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdFirewallRuleFirewallRuleNumberDelete");
      }

      // verify the required parameter 'firewallRuleNumber' is set
      if (firewallRuleNumber === undefined || firewallRuleNumber === null) {
        throw new Error("Missing the required parameter 'firewallRuleNumber' when calling serverServerIdFirewallRuleFirewallRuleNumberDelete");
      }


      let pathParams = {
        'serverId': serverId,
        'firewallRuleNumber': firewallRuleNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/server/{serverId}/firewall_rule/{firewallRuleNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdFirewallRuleFirewallRuleNumberGet operation.
     * @callback module:api/ServerApi~serverServerIdFirewallRuleFirewallRuleNumberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get firewall rule details
     * Returns detailed information about a specific firewall rule
     * @param {String} serverId Server id
     * @param {String} firewallRuleNumber Denotes the index of the firewall rule in the server&#39;s firewall rule list
     * @param {module:api/ServerApi~serverServerIdFirewallRuleFirewallRuleNumberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2008}
     */
    serverServerIdFirewallRuleFirewallRuleNumberGet(serverId, firewallRuleNumber, callback) {
      let postBody = null;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdFirewallRuleFirewallRuleNumberGet");
      }

      // verify the required parameter 'firewallRuleNumber' is set
      if (firewallRuleNumber === undefined || firewallRuleNumber === null) {
        throw new Error("Missing the required parameter 'firewallRuleNumber' when calling serverServerIdFirewallRuleFirewallRuleNumberGet");
      }


      let pathParams = {
        'serverId': serverId,
        'firewallRuleNumber': firewallRuleNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/server/{serverId}/firewall_rule/{firewallRuleNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdFirewallRuleGet operation.
     * @callback module:api/ServerApi~serverServerIdFirewallRuleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List firewall rules
     * Returns a list of firewall rules for a specific server.
     * @param {String} serverId Server id
     * @param {module:api/ServerApi~serverServerIdFirewallRuleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    serverServerIdFirewallRuleGet(serverId, callback) {
      let postBody = null;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdFirewallRuleGet");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/server/{serverId}/firewall_rule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdFirewallRulePost operation.
     * @callback module:api/ServerApi~serverServerIdFirewallRulePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create firewall rule
     * Creates a new firewall rule
     * @param {String} serverId Server id
     * @param {module:model/FirewallRule} firewallRule 
     * @param {module:api/ServerApi~serverServerIdFirewallRulePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serverServerIdFirewallRulePost(serverId, firewallRule, callback) {
      let postBody = firewallRule;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdFirewallRulePost");
      }

      // verify the required parameter 'firewallRule' is set
      if (firewallRule === undefined || firewallRule === null) {
        throw new Error("Missing the required parameter 'firewallRule' when calling serverServerIdFirewallRulePost");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/server/{serverId}/firewall_rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdRestartPost operation.
     * @callback module:api/ServerApi~serverServerIdRestartPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart server
     * Stops and starts a server. The server state must be &#x60;started&#x60;.
     * @param {String} serverId Id of server to restart
     * @param {module:model/RestartServer} restartServer 
     * @param {module:api/ServerApi~serverServerIdRestartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    serverServerIdRestartPost(serverId, restartServer, callback) {
      let postBody = restartServer;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdRestartPost");
      }

      // verify the required parameter 'restartServer' is set
      if (restartServer === undefined || restartServer === null) {
        throw new Error("Missing the required parameter 'restartServer' when calling serverServerIdRestartPost");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdStartPost operation.
     * @callback module:api/ServerApi~serverServerIdStartPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start server
     * Starts a stopped server. The server state must be &#x60;stopped&#x60;.
     * @param {String} serverId Id of server to start
     * @param {module:api/ServerApi~serverServerIdStartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    serverServerIdStartPost(serverId, callback) {
      let postBody = null;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdStartPost");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdStopPost operation.
     * @callback module:api/ServerApi~serverServerIdStopPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop server
     * Stops a started server. The server state must be &#x60;started&#x60;.
     * @param {String} serverId Id of server to stop
     * @param {module:model/StopServer} stopServer 
     * @param {module:api/ServerApi~serverServerIdStopPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    serverServerIdStopPost(serverId, stopServer, callback) {
      let postBody = stopServer;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdStopPost");
      }

      // verify the required parameter 'stopServer' is set
      if (stopServer === undefined || stopServer === null) {
        throw new Error("Missing the required parameter 'stopServer' when calling serverServerIdStopPost");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdStorageAttachPost operation.
     * @callback module:api/ServerApi~serverServerIdStorageAttachPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach storage
     * Attaches a storage as a device to a server.
     * @param {String} serverId Server id
     * @param {module:model/StorageDevice} storageDevice 
     * @param {module:api/ServerApi~serverServerIdStorageAttachPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    serverServerIdStorageAttachPost(serverId, storageDevice, callback) {
      let postBody = storageDevice;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdStorageAttachPost");
      }

      // verify the required parameter 'storageDevice' is set
      if (storageDevice === undefined || storageDevice === null) {
        throw new Error("Missing the required parameter 'storageDevice' when calling serverServerIdStorageAttachPost");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}/storage/attach', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdStorageCdromEjectPost operation.
     * @callback module:api/ServerApi~serverServerIdStorageCdromEjectPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Eject CD-ROM
     * Ejects the storage from the CD-ROM device of a server.
     * @param {String} serverId Server id
     * @param {module:api/ServerApi~serverServerIdStorageCdromEjectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    serverServerIdStorageCdromEjectPost(serverId, callback) {
      let postBody = null;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdStorageCdromEjectPost");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}/storage/cdrom/eject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdStorageCdromLoadPost operation.
     * @callback module:api/ServerApi~serverServerIdStorageCdromLoadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load CD-ROM
     * Loads a storage as a CD-ROM in the CD-ROM device of a server.
     * @param {String} serverId Server id
     * @param {Object} opts Optional parameters
     * @param {module:model/StorageDevice1} opts.storageDevice 
     * @param {module:api/ServerApi~serverServerIdStorageCdromLoadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    serverServerIdStorageCdromLoadPost(serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['storageDevice'];

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdStorageCdromLoadPost");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}/storage/cdrom/load', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdStorageDetachPost operation.
     * @callback module:api/ServerApi~serverServerIdStorageDetachPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detach storage
     * Detaches a storage resource from a server.
     * @param {String} serverId Server id
     * @param {module:model/StorageDevice} storageDevice 
     * @param {module:api/ServerApi~serverServerIdStorageDetachPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    serverServerIdStorageDetachPost(serverId, storageDevice, callback) {
      let postBody = storageDevice;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdStorageDetachPost");
      }

      // verify the required parameter 'storageDevice' is set
      if (storageDevice === undefined || storageDevice === null) {
        throw new Error("Missing the required parameter 'storageDevice' when calling serverServerIdStorageDetachPost");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}/storage/detach', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdTagTagListPost operation.
     * @callback module:api/ServerApi~serverServerIdTagTagListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign tag to a server
     * Servers can be tagged with one or more tags. The tags used must exist
     * @param {String} serverId Server id
     * @param {String} tagList List of tags
     * @param {module:api/ServerApi~serverServerIdTagTagListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    serverServerIdTagTagListPost(serverId, tagList, callback) {
      let postBody = null;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdTagTagListPost");
      }

      // verify the required parameter 'tagList' is set
      if (tagList === undefined || tagList === null) {
        throw new Error("Missing the required parameter 'tagList' when calling serverServerIdTagTagListPost");
      }


      let pathParams = {
        'serverId': serverId,
        'tagList': tagList
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}/tag/{tagList}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverServerIdUntagTagNamePost operation.
     * @callback module:api/ServerApi~serverServerIdUntagTagNamePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove tag from server
     * Untags tags from given server. The tag(s) must exist
     * @param {String} serverId Server id
     * @param {String} tagName Tag name
     * @param {module:api/ServerApi~serverServerIdUntagTagNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    serverServerIdUntagTagNamePost(serverId, tagName, callback) {
      let postBody = null;

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling serverServerIdUntagTagNamePost");
      }

      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling serverServerIdUntagTagNamePost");
      }


      let pathParams = {
        'serverId': serverId,
        'tagName': tagName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}/untag/{tagName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverSizeGet operation.
     * @callback module:api/ServerApi~serverSizeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List server configurations
     * Returns a list of available server configurations. A server configuration consists of a combination of CPU core count and main memory amount. All servers are created using these configurations.
     * @param {module:api/ServerApi~serverSizeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    serverSizeGet(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/server_size', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServer operation.
     * @callback module:api/ServerApi~updateServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify server
     * @param {String} serverId Id of server to modify
     * @param {Object} opts Optional parameters
     * @param {module:model/Server} opts.server 
     * @param {module:api/ServerApi~updateServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListResponse}
     */
    updateServer(serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['server'];

      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling updateServer");
      }


      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServerListResponse;

      return this.apiClient.callApi(
        '/server/{serverId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
