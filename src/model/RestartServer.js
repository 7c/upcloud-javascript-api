/**
 * Upcloud api
 * The UpCloud API consists of operations used to control resources on UpCloud. The API is a web service interface. HTTPS is used to connect to the API. The API follows the principles of a RESTful web service wherever possible. The base URL for all API operations is  https://api.upcloud.com/. All API operations require authentication.
 *
 * OpenAPI spec version: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';





/**
* The RestartServer model module.
* @module model/RestartServer
* @version 1.2.0
*/
export default class RestartServer {
    /**
    * Constructs a new <code>RestartServer</code>.
    * @alias module:model/RestartServer
    * @class
    */

    constructor() {
        

        
        

        

        
    }

    /**
    * Constructs a <code>RestartServer</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/RestartServer} obj Optional instance to populate.
    * @return {module:model/RestartServer} The populated <code>RestartServer</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestartServer();

            
            
            

            if (data.hasOwnProperty('stop_type')) {
                obj['stop_type'] = ApiClient.convertToType(data['stop_type'], 'String');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Number');
            }
            if (data.hasOwnProperty('timeout_action')) {
                obj['timeout_action'] = ApiClient.convertToType(data['timeout_action'], 'String');
            }
        }
        return obj;
    }

    /**
    * Restart type
    * @member {module:model/RestartServer.StopTypeEnum} stop_type
    * @default 'soft'
    */
    stop_type = 'soft';
    /**
    * Stop timeout in seconds
    * @member {Number} timeout
    */
    timeout = undefined;
    /**
    * Action to take if timeout limit is exceeded.
    * @member {module:model/RestartServer.TimeoutActionEnum} timeout_action
    */
    timeout_action = undefined;






    /**
    * Allowed values for the <code>stop_type</code> property.
    * @enum {String}
    * @readonly
    */
    static StopTypeEnum = {
    
        /**
         * value: "soft"
         * @const
         */
        "soft": "soft",
    
        /**
         * value: "hard"
         * @const
         */
        "hard": "hard"    
    };

    /**
    * Allowed values for the <code>timeout_action</code> property.
    * @enum {String}
    * @readonly
    */
    static TimeoutActionEnum = {
    
        /**
         * value: "destroy"
         * @const
         */
        "destroy": "destroy",
    
        /**
         * value: "ignore"
         * @const
         */
        "ignore": "ignore"    
    };



}


