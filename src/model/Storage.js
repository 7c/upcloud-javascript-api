/**
 * Upcloud api
 * Upcloud api specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import BackupRule from './BackupRule';
import StorageBackups from './StorageBackups';
import StorageServers from './StorageServers';





/**
* The Storage model module.
* @module model/Storage
* @version 1.0.0
*/
export default class Storage {
    /**
    * Constructs a new <code>Storage</code>.
    * @alias module:model/Storage
    * @class
    */

    constructor() {
        

        
        

        

        
    }

    /**
    * Constructs a <code>Storage</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Storage} obj Optional instance to populate.
    * @return {module:model/Storage} The populated <code>Storage</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Storage();

            
            
            

            if (data.hasOwnProperty('access')) {
                obj['access'] = ApiClient.convertToType(data['access'], 'String');
            }
            if (data.hasOwnProperty('backup_rule')) {
                obj['backup_rule'] = BackupRule.constructFromObject(data['backup_rule']);
            }
            if (data.hasOwnProperty('backups')) {
                obj['backups'] = StorageBackups.constructFromObject(data['backups']);
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'Number');
            }
            if (data.hasOwnProperty('servers')) {
                obj['servers'] = StorageServers.constructFromObject(data['servers']);
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('tier')) {
                obj['tier'] = ApiClient.convertToType(data['tier'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
    * @member {module:model/Storage.AccessEnum} access
    */
    access = undefined;
    /**
    * @member {module:model/BackupRule} backup_rule
    */
    backup_rule = undefined;
    /**
    * @member {module:model/StorageBackups} backups
    */
    backups = undefined;
    /**
    * @member {Number} license
    */
    license = undefined;
    /**
    * @member {module:model/StorageServers} servers
    */
    servers = undefined;
    /**
    * @member {Number} size
    */
    size = undefined;
    /**
    * @member {module:model/Storage.StateEnum} state
    */
    state = undefined;
    /**
    * @member {module:model/Storage.TierEnum} tier
    */
    tier = undefined;
    /**
    * @member {String} title
    */
    title = undefined;
    /**
    * @member {module:model/Storage.TypeEnum} type
    */
    type = undefined;
    /**
    * @member {String} uuid
    */
    uuid = undefined;
    /**
    * @member {String} zone
    */
    zone = undefined;






    /**
    * Allowed values for the <code>access</code> property.
    * @enum {String}
    * @readonly
    */
    static AccessEnum = {
    
        /**
         * value: "public"
         * @const
         */
        "public": "public",
    
        /**
         * value: "private"
         * @const
         */
        "private": "private"    
    };

    /**
    * Allowed values for the <code>state</code> property.
    * @enum {String}
    * @readonly
    */
    static StateEnum = {
    
        /**
         * value: "online"
         * @const
         */
        "online": "online",
    
        /**
         * value: "maintenance"
         * @const
         */
        "maintenance": "maintenance",
    
        /**
         * value: "cloning"
         * @const
         */
        "cloning": "cloning",
    
        /**
         * value: "backuping"
         * @const
         */
        "backuping": "backuping",
    
        /**
         * value: "error"
         * @const
         */
        "error": "error"    
    };

    /**
    * Allowed values for the <code>tier</code> property.
    * @enum {String}
    * @readonly
    */
    static TierEnum = {
    
        /**
         * value: "hdd"
         * @const
         */
        "hdd": "hdd",
    
        /**
         * value: "maxiops"
         * @const
         */
        "maxiops": "maxiops"    
    };

    /**
    * Allowed values for the <code>type</code> property.
    * @enum {String}
    * @readonly
    */
    static TypeEnum = {
    
        /**
         * value: "normal"
         * @const
         */
        "normal": "normal",
    
        /**
         * value: "disk"
         * @const
         */
        "disk": "disk",
    
        /**
         * value: "cdrom"
         * @const
         */
        "cdrom": "cdrom",
    
        /**
         * value: "template"
         * @const
         */
        "template": "template",
    
        /**
         * value: "backup"
         * @const
         */
        "backup": "backup"    
    };



}


