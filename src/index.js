/**
 * Upcloud api
 * Upcloud api specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import BackupRule from './model/BackupRule';
import Error from './model/Error';
import ErrorCode from './model/ErrorCode';
import ErrorError from './model/ErrorError';
import ErrorStatus from './model/ErrorStatus';
import InlineResponse200 from './model/InlineResponse200';
import InlineResponse2001 from './model/InlineResponse2001';
import InlineResponse2002 from './model/InlineResponse2002';
import InlineResponse2002Storages from './model/InlineResponse2002Storages';
import InlineResponse200Servers from './model/InlineResponse200Servers';
import IpAddress from './model/IpAddress';
import Server from './model/Server';
import ServerIpAddresses from './model/ServerIpAddresses';
import ServerStorageDevices from './model/ServerStorageDevices';
import ServerTags from './model/ServerTags';
import Storage from './model/Storage';
import StorageBackups from './model/StorageBackups';
import StorageDevice from './model/StorageDevice';
import StorageServers from './model/StorageServers';
import ServerApi from './api/ServerApi';
import StorageApi from './api/StorageApi';


/**
* Upcloud_api_specification.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var UpcloudApi = require('index'); // See note below*.
* var xxxSvc = new UpcloudApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new UpcloudApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new UpcloudApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new UpcloudApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The BackupRule model constructor.
     * @property {module:model/BackupRule}
     */
    BackupRule,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorCode model constructor.
     * @property {module:model/ErrorCode}
     */
    ErrorCode,

    /**
     * The ErrorError model constructor.
     * @property {module:model/ErrorError}
     */
    ErrorError,

    /**
     * The ErrorStatus model constructor.
     * @property {module:model/ErrorStatus}
     */
    ErrorStatus,

    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200,

    /**
     * The InlineResponse2001 model constructor.
     * @property {module:model/InlineResponse2001}
     */
    InlineResponse2001,

    /**
     * The InlineResponse2002 model constructor.
     * @property {module:model/InlineResponse2002}
     */
    InlineResponse2002,

    /**
     * The InlineResponse2002Storages model constructor.
     * @property {module:model/InlineResponse2002Storages}
     */
    InlineResponse2002Storages,

    /**
     * The InlineResponse200Servers model constructor.
     * @property {module:model/InlineResponse200Servers}
     */
    InlineResponse200Servers,

    /**
     * The IpAddress model constructor.
     * @property {module:model/IpAddress}
     */
    IpAddress,

    /**
     * The Server model constructor.
     * @property {module:model/Server}
     */
    Server,

    /**
     * The ServerIpAddresses model constructor.
     * @property {module:model/ServerIpAddresses}
     */
    ServerIpAddresses,

    /**
     * The ServerStorageDevices model constructor.
     * @property {module:model/ServerStorageDevices}
     */
    ServerStorageDevices,

    /**
     * The ServerTags model constructor.
     * @property {module:model/ServerTags}
     */
    ServerTags,

    /**
     * The Storage model constructor.
     * @property {module:model/Storage}
     */
    Storage,

    /**
     * The StorageBackups model constructor.
     * @property {module:model/StorageBackups}
     */
    StorageBackups,

    /**
     * The StorageDevice model constructor.
     * @property {module:model/StorageDevice}
     */
    StorageDevice,

    /**
     * The StorageServers model constructor.
     * @property {module:model/StorageServers}
     */
    StorageServers,

    /**
    * The ServerApi service constructor.
    * @property {module:api/ServerApi}
    */
    ServerApi,

    /**
    * The StorageApi service constructor.
    * @property {module:api/StorageApi}
    */
    StorageApi
};
